
#### JSX
- **JSX Syntax**: Write HTML-like syntax within JavaScript.
  ```jsx
  const element = <h1>Hello, world!</h1>;
  ```

- **JavaScript Expressions in JSX**:
  ```jsx
  const name = 'John';
  const element = <h1>Hello, {name}!</h1>;
  ```

- **Nested Elements**:
  ```jsx
  const element = (
    <div>
      <h1>Hello!</h1>
      <h2>Good to see you here.</h2>
    </div>
  );
  ```

#### Components
- **Functional Component**:
  ```jsx
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }
  ```

- **Class-Based Component**:
  ```jsx
  import React, { Component } from 'react';

  class Welcome extends Component {
    render() {
      return <h1>Hello, {this.props.name}</h1>;
    }
  }
  ```

- **Functional Component with Hooks**:
  ```jsx
  import React, { useState } from 'react';

  function Counter() {
    const [count, setCount] = useState(0);

    return (
      <div>
        <p>You clicked {count} times</p>
        <button onClick={() => setCount(count + 1)}>Click me</button>
      </div>
    );
  }
  ```

#### Props
- **Using Props in a Functional Component**:
  ```jsx
  function Welcome(props) {
    return <h1>Hello, {props.name}</h1>;
  }

  const element = <Welcome name="Sara" />;
  ```

- **Using Props in a Class-Based Component**:
  ```jsx
  class Welcome extends React.Component {
    render() {
      return <h1>Hello, {this.props.name}</h1>;
    }
  }

  const element = <Welcome name="Sara" />;
  ```

#### State
- **State in a Class-Based Component**:
  ```jsx
  class Clock extends React.Component {
    constructor(props) {
      super(props);
      this.state = { date: new Date() };
    }

    componentDidMount() {
      this.timerID = setInterval(() => this.tick(), 1000);
    }

    componentWillUnmount() {
      clearInterval(this.timerID);
    }

    tick() {
      this.setState({
        date: new Date()
      });
    }

    render() {
      return (
        <div>
          <h1>Hello, world!</h1>
          <h2>It is {this.state.date.toLocaleTimeString()}.</h2>
        </div>
      );
    }
  }
  ```

- **State in a Functional Component with `useState` Hook**:
  ```jsx
  import React, { useState, useEffect } from 'react';

  function Clock() {
    const [date, setDate] = useState(new Date());

    useEffect(() => {
      const timerID = setInterval(() => setDate(new Date()), 1000);
      return () => clearInterval(timerID);
    }, []);

    return (
      <div>
        <h1>Hello, world!</h1>
        <h2>It is {date.toLocaleTimeString()}.</h2>
      </div>
    );
  }
  ```

#### Lifecycle Methods
- **Lifecycle Methods in a Class-Based Component**:
  ```jsx
  class Example extends React.Component {
    componentDidMount() {
      console.log('Component did mount');
    }

    componentDidUpdate(prevProps, prevState) {
      console.log('Component did update');
    }

    componentWillUnmount() {
      console.log('Component will unmount');
    }

    render() {
      return <div>Example Component</div>;
    }
  }
  ```

- **Lifecycle Equivalents with `useEffect` Hook**:
  ```jsx
  import React, { useEffect, useState } from 'react';

  function Example() {
    useEffect(() => {
      console.log('Component did mount');

      return () => {
        console.log('Component will unmount');
      };
    }, []);

    useEffect(() => {
      console.log('Component did update');
    });

    return <div>Example Component</div>;
  }
  ```

---

### Handling Events

#### Event Handlers
- **Event Handler in a Functional Component**:
  ```jsx
  function handleClick() {
    console.log('Button was clicked!');
  }

  <button onClick={handleClick}>Click me</button>
  ```

- **Event Handler in a Class-Based Component**:
  ```jsx
  class Button extends React.Component {
    handleClick() {
      console.log('Button was clicked!');
    }

    render() {
      return <button onClick={() => this.handleClick()}>Click me</button>;
    }
  }
  ```

#### Handling User Inputs and Forms
- **Form Handling in a Class-Based Component**:
  ```jsx
  class Form extends React.Component {
    constructor(props) {
      super(props);
      this.state = { value: '' };

      this.handleChange = this.handleChange.bind(this);
      this.handleSubmit = this.handleSubmit.bind(this);
    }

    handleChange(event) {
      this.setState({ value: event.target.value });
    }

    handleSubmit(event) {
      alert('A name was submitted: ' + this.state.value);
      event.preventDefault();
    }

    render() {
      return (
        <form onSubmit={this.handleSubmit}>
          <label>
            Name:
            <input type="text" value={this.state.value} onChange={this.handleChange} />
          </label>
          <button type="submit">Submit</button>
        </form>
      );
    }
  }
  ```

- **Form Handling in a Functional Component with `useState`**:
  ```jsx
  import React, { useState } from 'react';

  function Form() {
    const [value, setValue] = useState('');

    const handleChange = (event) => {
      setValue(event.target.value);
    };

    const handleSubmit = (event) => {
      alert('A name was submitted: ' + value);
      event.preventDefault();
    };

    return (
      <form onSubmit={handleSubmit}>
        <label>
          Name:
          <input type="text" value={value} onChange={handleChange} />
        </label>
        <button type="submit">Submit</button>
      </form>
    );
  }
  ```

---

### React State Management

#### useState
- **Simple Counter**:
  ```jsx
  import React, { useState } from 'react';

  function Counter() {
    const [count, setCount] = useState(0);

    return (
      <div>
        <p>You clicked {count} times</p>
        <button onClick={() => setCount(count + 1)}>Click me</button>
      </div>
    );
  }
  ```

- **Managing Object State**:
  ```jsx
  import React, { useState } from 'react';

  function Form() {
    const [formData, setFormData] = useState({ name: '', email: '' });

    const handleChange = (e) => {
      const { name, value } = e.target;
      setFormData((prevData) => ({
        ...prevData,
        [name]: value,
      }));
    };

    const handleSubmit = (e) => {
      e.preventDefault();
      console.log('Form Data:', formData);
    };

    return (
      <form onSubmit={handleSubmit}>
        <div>
          <label>Name:</label>
          <input name="name" value={formData.name} onChange={handleChange} />
        </div>
        <div>
          <label>Email:</label>
          <input name="email" value={formData.email} onChange={handleChange} />
        </div>
        <button type="submit">Submit</button>
      </form>
    );
  }
  ```

---

### Development Tools

#### create-react-app
- **Creating and Running a Project**:
  ```bash
  npx create-react-app my-app
  cd my-app
  npm start
  ```

- **Project Structure**:
  ```
  my-app
  ├── node_modules
  ├── public
  │   ├── index.html
  │   └── ...
  ├── src
  │   ├── App.css
  │   ├── App.js
  │   ├── App.test.js
  │   ├── index.css
  │   ├── index.js
  │   ├── logo.svg
  │   └── ...
  ├── .gitignore
  ├── package.json
  └── README.md
  ```

#### Vite
- **Creating and Running a Project**:
  ```bash
  npm init vite@latest my-vite-app --template react
  cd my-vite-app
  npm install
  npm run dev
  ```

- **Vite Configuration**:
  ```js
  // vite.config.js
  import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';

  export default defineConfig({
    plugins: [react()],
  });
  ```

#### Import and Export
- **Exporting and Importing a Function**:
  ```jsx
  // utils.js
  export function add(a, b) {


    return a + b;
  }

  // App.js
  import { add } from './utils';

  console.log(add(2, 3)); // 5
  ```

- **Exporting and Importing a Class**:
  ```jsx
  // User.js
  export class User {
    constructor(name) {
      this.name = name;
    }

    greet() {
      return `Hello, ${this.name}`;
    }
  }

  // App.js
  import { User } from './User';

  const user = new User('Alice');
  console.log(user.greet()); // Hello, Alice
  ```

#### npm
- **Installing a Package**:
  ```bash
  npm install axios
  ```

- **npm Scripts**:
  ```json
  // package.json
  {
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    }
  }
  ```

---

### APIs

#### Axios
- **Making a GET Request**:
  ```jsx
  import React, { useState, useEffect } from 'react';
  import axios from 'axios';

  function DataFetching() {
    const [data, setData] = useState([]);

    useEffect(() => {
      axios.get('https://jsonplaceholder.typicode.com/posts')
        .then(response => {
          setData(response.data);
        })
        .catch(error => {
          console.error('There was an error!', error);
        });
    }, []);

    return (
      <div>
        <ul>
          {data.map(item => (
            <li key={item.id}>{item.title}</li>
          ))}
        </ul>
      </div>
    );
  }
  ```

- **Making a POST Request**:
  ```jsx
  import React, { useState } from 'react';
  import axios from 'axios';

  function PostData() {
    const [title, setTitle] = useState('');
    const [body, setBody] = useState('');

    const handleSubmit = (e) => {
      e.preventDefault();
      axios.post('https://jsonplaceholder.typicode.com/posts', { title, body })
        .then(response => {
          console.log(response.data);
        })
        .catch(error => {
          console.error('There was an error!', error);
        });
    };

    return (
      <form onSubmit={handleSubmit}>
        <div>
          <label>Title:</label>
          <input type="text" value={title} onChange={(e) => setTitle(e.target.value)} />
        </div>
        <div>
          <label>Body:</label>
          <input type="text" value={body} onChange={(e) => setBody(e.target.value)} />
        </div>
        <button type="submit">Submit</button>
      </form>
    );
  }
  ```
